# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateProduct {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
}

type AggregateShop {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  logIn(input: LogInInput!): User!
  signUp(input: SignUpInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Product {
  createdAt: DateTime!
  id: String!
  name: String!
  shop: Shop!
  shopId: String!
}

type ProductCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  shopId: Int!
}

input ProductCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  shopId: SortOrder
}

type ProductGroupBy {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
  shopId: String!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
  shopId: String
}

input ProductMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  shopId: SortOrder
}

type ProductMinAggregate {
  createdAt: DateTime
  id: String
  name: String
  shopId: String
}

input ProductMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  shopId: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithAggregationInput {
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  shopId: SortOrder
}

input ProductOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  shop: ShopOrderByWithRelationInput
  shopId: SortOrder
}

enum ProductScalarFieldEnum {
  createdAt
  id
  name
  shopId
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  shopId: StringWithAggregatesFilter
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  shop: ShopRelationFilter
  shopId: StringFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateShop(cursor: ShopWhereUniqueInput, orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): AggregateShop!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstShop(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): Shop
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  groupByShop(by: [ShopScalarFieldEnum!]!, having: ShopScalarWhereWithAggregatesInput, orderBy: [ShopOrderByWithAggregationInput!], skip: Int, take: Int, where: ShopWhereInput): [ShopGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): [Shop!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Shop {
  _count: ShopCount
  createdAt: DateTime!
  id: String!
  name: String!
  owner: User!
  ownerId: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

type ShopCount {
  products: Int!
}

type ShopCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  ownerId: Int!
}

input ShopCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
}

type ShopGroupBy {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
  ownerId: String!
}

input ShopListRelationFilter {
  every: ShopWhereInput
  none: ShopWhereInput
  some: ShopWhereInput
}

type ShopMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
  ownerId: String
}

input ShopMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
}

type ShopMinAggregate {
  createdAt: DateTime
  id: String
  name: String
  ownerId: String
}

input ShopMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
}

input ShopOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShopOrderByWithAggregationInput {
  _count: ShopCountOrderByAggregateInput
  _max: ShopMaxOrderByAggregateInput
  _min: ShopMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  ownerId: SortOrder
}

input ShopOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  products: ProductOrderByRelationAggregateInput
}

input ShopRelationFilter {
  is: ShopWhereInput
  isNot: ShopWhereInput
}

enum ShopScalarFieldEnum {
  createdAt
  id
  name
  ownerId
}

input ShopScalarWhereWithAggregatesInput {
  AND: [ShopScalarWhereWithAggregatesInput!]
  NOT: [ShopScalarWhereWithAggregatesInput!]
  OR: [ShopScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  ownerId: StringWithAggregatesFilter
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  products: ProductListRelationFilter
}

input ShopWhereUniqueInput {
  id: String
}

input SignUpInput {
  email: String!
  fullName: String!
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  fullName: String!
  id: String!
  shops(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByWithRelationInput!], skip: Int, take: Int, where: ShopWhereInput): [Shop!]!
}

type UserCount {
  shops: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  fullName: Int!
  id: Int!
  passwordHash: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  fullName: SortOrder
  id: SortOrder
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  fullName: String!
  id: String!
  passwordHash: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  fullName: String
  id: String
  passwordHash: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  fullName: SortOrder
  id: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  fullName: String
  id: String
  passwordHash: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  fullName: SortOrder
  id: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  fullName: SortOrder
  id: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  fullName: SortOrder
  id: SortOrder
  shops: ShopOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  fullName
  id
  passwordHash
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  fullName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  fullName: StringFilter
  id: StringFilter
  shops: ShopListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
