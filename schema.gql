# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateShop {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
}

type AggregateShopOwner {
  _count: ShopOwnerCountAggregate
  _max: ShopOwnerMaxAggregate
  _min: ShopOwnerMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  logIn(input: LogInInput!): User!
  signUp(input: SignUpInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateShop(cursor: ShopWhereUniqueInput, orderBy: [ShopOrderByInput!], skip: Int, take: Int, where: ShopWhereInput): AggregateShop!
  aggregateShopOwner(cursor: ShopOwnerWhereUniqueInput, orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): AggregateShopOwner!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstShop(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByInput!], skip: Int, take: Int, where: ShopWhereInput): Shop
  findFirstShopOwner(cursor: ShopOwnerWhereUniqueInput, distinct: [ShopOwnerScalarFieldEnum!], orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): ShopOwner
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByShop(by: [ShopScalarFieldEnum!]!, having: ShopScalarWhereWithAggregatesInput, orderBy: [ShopOrderByInput!], skip: Int, take: Int, where: ShopWhereInput): [ShopGroupBy!]!
  groupByShopOwner(by: [ShopOwnerScalarFieldEnum!]!, having: ShopOwnerScalarWhereWithAggregatesInput, orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): [ShopOwnerGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shopOwner(where: ShopOwnerWhereUniqueInput!): ShopOwner
  shopOwners(cursor: ShopOwnerWhereUniqueInput, distinct: [ShopOwnerScalarFieldEnum!], orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): [ShopOwner!]!
  shops(cursor: ShopWhereUniqueInput, distinct: [ShopScalarFieldEnum!], orderBy: [ShopOrderByInput!], skip: Int, take: Int, where: ShopWhereInput): [Shop!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Shop {
  createdAt: DateTime!
  id: String!
  name: String!
  owners(cursor: ShopOwnerWhereUniqueInput, distinct: [ShopOwnerScalarFieldEnum!], orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): [ShopOwner!]!
}

type ShopCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
}

type ShopGroupBy {
  _count: ShopCountAggregate
  _max: ShopMaxAggregate
  _min: ShopMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
}

type ShopMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
}

type ShopMinAggregate {
  createdAt: DateTime
  id: String
  name: String
}

input ShopOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type ShopOwner {
  ownedAt: DateTime!
  shop: Shop!
  shopId: String!
  user: User!
  userId: String!
}

type ShopOwnerCountAggregate {
  _all: Int!
  ownedAt: Int!
  shopId: Int!
  userId: Int!
}

type ShopOwnerGroupBy {
  _count: ShopOwnerCountAggregate
  _max: ShopOwnerMaxAggregate
  _min: ShopOwnerMinAggregate
  ownedAt: DateTime!
  shopId: String!
  userId: String!
}

input ShopOwnerListRelationFilter {
  every: ShopOwnerWhereInput
  none: ShopOwnerWhereInput
  some: ShopOwnerWhereInput
}

type ShopOwnerMaxAggregate {
  ownedAt: DateTime
  shopId: String
  userId: String
}

type ShopOwnerMinAggregate {
  ownedAt: DateTime
  shopId: String
  userId: String
}

input ShopOwnerOrderByInput {
  ownedAt: SortOrder
  shopId: SortOrder
  userId: SortOrder
}

enum ShopOwnerScalarFieldEnum {
  ownedAt
  shopId
  userId
}

input ShopOwnerScalarWhereWithAggregatesInput {
  AND: [ShopOwnerScalarWhereWithAggregatesInput!]
  NOT: [ShopOwnerScalarWhereWithAggregatesInput!]
  OR: [ShopOwnerScalarWhereWithAggregatesInput!]
  ownedAt: DateTimeWithAggregatesFilter
  shopId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ShopOwnerShopIdUserIdCompoundUniqueInput {
  shopId: String!
  userId: String!
}

input ShopOwnerWhereInput {
  AND: [ShopOwnerWhereInput!]
  NOT: [ShopOwnerWhereInput!]
  OR: [ShopOwnerWhereInput!]
  ownedAt: DateTimeFilter
  shop: ShopRelationFilter
  shopId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ShopOwnerWhereUniqueInput {
  shopId_userId: ShopOwnerShopIdUserIdCompoundUniqueInput
}

input ShopRelationFilter {
  is: ShopWhereInput
  isNot: ShopWhereInput
}

enum ShopScalarFieldEnum {
  createdAt
  id
  name
}

input ShopScalarWhereWithAggregatesInput {
  AND: [ShopScalarWhereWithAggregatesInput!]
  NOT: [ShopScalarWhereWithAggregatesInput!]
  OR: [ShopScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  owners: ShopOwnerListRelationFilter
}

input ShopWhereUniqueInput {
  id: String
}

input SignUpInput {
  email: String!
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  id: String!
  shops(cursor: ShopOwnerWhereUniqueInput, distinct: [ShopOwnerScalarFieldEnum!], orderBy: [ShopOwnerOrderByInput!], skip: Int, take: Int, where: ShopOwnerWhereInput): [ShopOwner!]!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  passwordHash: Int!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  id: String!
  passwordHash: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  id: String
  passwordHash: String
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  id: String
  passwordHash: String
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  passwordHash: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  id
  passwordHash
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  passwordHash: StringWithAggregatesFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  passwordHash: StringFilter
  shops: ShopOwnerListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
